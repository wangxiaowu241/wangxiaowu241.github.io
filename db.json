{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1621748624521},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"5dd1bc484140e2bb0cd3b310a55b8641d270e743","modified":1621748629025},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"source/_posts/SpringCloud之Feign简介及使用.md","hash":"f2e2f03623b65b50eaaf66e87a69420212fd3487","modified":1621749901470},{"_id":"source/_posts/.DS_Store","hash":"e8c2a292973df511d5d409e1dcd1bae11f18e451","modified":1621749143402},{"_id":"source/.DS_Store","hash":"6c1c2c14b2e13d2b9ebcf2bdd285834025ed819a","modified":1621748833680},{"_id":"public/2021/05/23/hello-world/index.html","hash":"9cc941a8f4c4216495a83fc7b982ca8ca04460cc","modified":1621749297805},{"_id":"public/2021/05/23/SpringCloud之Feign简介及使用/index.html","hash":"7fc73982f3b53bb0030b5c8a0fe58b1173d29ea5","modified":1621749806202},{"_id":"public/index.html","hash":"989b946dec978897e247924f6ffa31d01268e72b","modified":1621749806202},{"_id":"public/archives/index.html","hash":"7c3f002f6dd8e213973623d671cc45cefec20659","modified":1621749297805},{"_id":"public/archives/2021/index.html","hash":"aa4029ed695df92eda5f520af0207054e6a563c8","modified":1621749297805},{"_id":"public/archives/2021/05/index.html","hash":"fad8874071bcb803140d361ee6b546b5039a447d","modified":1621749297805}],"Category":[{"name":"java","_id":"ckp0s0om800005e85fusy54zz"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-05-23T05:43:44.521Z","updated":"2021-05-23T05:43:44.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp0r9j9o00003i852cd51kjx","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"SpringCloud之Feign简介及使用","date":"2021-05-23T05:51:30.000Z","description":"上一篇简单介绍了springcloud声明式服务调用Feign的使用，接下来分析下Feign的源码，具体实现及为什么如此实现。","_content":"\n## Feign的目标\n\nfeign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。\n\n## 引入Feign \n\n项目中使用了gradle作为依赖管理，maven类似。\n\n```groovy\ndependencies {\n    //feign\n    implementation('org.springframework.cloud:spring-cloud-starter-openfeign:2.0.2.RELEASE')\n\t//web\n    implementation('org.springframework.boot:spring-boot-starter-web')\n    //eureka client\n    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.1.0.M1')\n\t//test\n    testImplementation('org.springframework.boot:spring-boot-starter-test')\n}\n```\n\n因为feign底层是使用了ribbon作为负载均衡的客户端，而ribbon的负载均衡也是依赖于eureka 获得各个服务的地址，所以要引入eureka-client。\n\nSpringbootApplication启动类加上@FeignClient注解，以及@EnableDiscoveryClient。\n\n```java\n@EnableFeignClients\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n}\n```\n\nyaml配置：\n\n```yaml\nserver:\n  port: 8082\n\n#配置eureka\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n  instance:\n    status-page-url-path: /info\n    health-check-url-path: /health\n\n#服务名称\nspring:\n  application:\n    name: product\n  profiles:\n    active: ${boot.profile:dev}\n#feign的配置，连接超时及读取超时配置\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        readTimeout: 5000\n        loggerLevel: basic\n```\n\n## Feign的使用\n\n```java\n@FeignClient(value = \"CART\")\npublic interface CartFeignClient {\n\n    @PostMapping(\"/cart/{productId}\")\n    Long addCart(@PathVariable(\"productId\")Long productId);\n}\n```\n\n上面是最简单的feign client的使用，声明完为feign client后，其他spring管理的类，如service就可以直接注入使用了，例如：\n\n```java\n//这里直接注入feign client\n@Autowired\nprivate CartFeignClient cartFeignClient;\n\n@PostMapping(\"/toCart/{productId}\")\npublic ResponseEntity addCart(@PathVariable(\"productId\") Long productId){\n    Long result = cartFeignClient.addCart(productId);\n    return ResponseEntity.ok(result);\n}\n```\n\n可以看到，使用feign之后，我们调用eureka 注册的其他服务，在代码中就像各个service之间相互调用那么简单。\n\n## FeignClient注解的一些属性\n\n| 属性名        | 默认值     | 作用                                                         | 备注                                        |\n| ------------- | ---------- | ------------------------------------------------------------ | ------------------------------------------- |\n| value         | 空字符串   | 调用服务名称，和name属性相同                                 |                                             |\n| serviceId     | 空字符串   | 服务id，作用和name属性相同                                   | 已过期                                      |\n| name          | 空字符串   | 调用服务名称，和value属性相同                                |                                             |\n| url           | 空字符串   | 全路径地址或hostname，http或https可选                        |                                             |\n| decode404     | false      | 配置响应状态码为404时是否应该抛出FeignExceptions             |                                             |\n| configuration | {}         | 自定义当前feign client的一些配置                             | 参考FeignClientsConfiguration               |\n| fallback      | void.class | 熔断机制，调用失败时，走的一些回退方法，可以用来抛出异常或给出默认返回数据。 | 底层依赖hystrix，启动类要加上@EnableHystrix |\n| path          | 空字符串   | 自动给所有方法的requestMapping前加上前缀，类似与controller类上的requestMapping |                                             |\n| primary       | true       |                                                              |                                             |\n\n此外，还有qualifier及fallbackFactory，这里就不再赘述。\n\n## Feign自定义处理返回的异常\n\n这里贴上GitHub上openFeign的wiki给出的自定义errorDecoder例子。\n\n```java\npublic class StashErrorDecoder implements ErrorDecoder {\n\n    @Override\n    public Exception decode(String methodKey, Response response) {\n        if (response.status() >= 400 && response.status() <= 499) {\n            //这里是给出的自定义异常\n            return new StashClientException(\n                    response.status(),\n                    response.reason()\n            );\n        }\n        if (response.status() >= 500 && response.status() <= 599) {\n            //这里是给出的自定义异常\n            return new StashServerException(\n                    response.status(),\n                    response.reason()\n            );\n        }\n        //这里是其他状态码处理方法\n        return errorStatus(methodKey, response);\n    }\n}\n```\n\n自定义好异常处理类后，要在@Configuration修饰的配置类中声明此类。\n\n## Feign使用OKhttp发送request\n\nFeign底层默认是使用jdk中的HttpURLConnection发送HTTP请求，feign也提供了OKhttp来发送请求，具体配置如下：\n\n```java\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        readTimeout: 5000\n        loggerLevel: basic\n  okhttp:\n    enabled: true\n  hystrix:\n    enabled: true\n```\n\n## Feign原理简述\n\n- 启动时，程序会进行包扫描，扫描所有包下所有@FeignClient注解的类，并将这些类注入到spring的IOC容器中。当定义的Feign中的接口被调用时，通过JDK的动态代理来生成RequestTemplate。\n- RequestTemplate中包含请求的所有信息，如请求参数，请求URL等。\n- RequestTemplate声场Request，然后将Request交给client处理，这个client默认是JDK的HTTPUrlConnection，也可以是OKhttp、Apache的HTTPClient等。\n- 最后client封装成LoadBaLanceClient，结合ribbon负载均衡地发起调用。\n\n详细原理请参考源码解析。\n\nFeign、hystrix与retry的关系请参考https://xli1224.github.io/2017/09/22/configure-feign/\n\n## Feign开启GZIP压缩\n\nSpring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率。\n\napplication.yml配置信息如下：\n\n```yaml\nfeign:\n  compression:\n    request: #请求\n      enabled: true #开启\n      mime-types: text/xml,application/xml,application/json #开启支持压缩的MIME TYPE\n      min-request-size: 2048 #配置压缩数据大小的下限\n    response: #响应\n      enabled: true #开启响应GZIP压缩\n```\n\n注意：\n\n由于开启GZIP压缩之后，Feign之间的调用数据通过二进制协议进行传输，返回值需要修改为ResponseEntity<byte[]>才可以正常显示，否则会导致服务之间的调用乱码。\n\n示例如下：\n\n```java\n@PostMapping(\"/order/{productId}\")\nResponseEntity<byte[]> addCart(@PathVariable(\"productId\") Long productId);\n```\n\n## 作用在所有Feign Client上的配置方式\n\n方式一：通过java bean 的方式指定。\n\n@EnableFeignClients注解上有个defaultConfiguration属性，可以指定默认Feign Client的一些配置。\n\n```java\n@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)\n@EnableDiscoveryClient\n@SpringBootApplication\n@EnableCircuitBreaker\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n}\n```\n\nDefaultFeignConfiguration内容：\n\n```java\n@Configuration\npublic class DefaultFeignConfiguration {\n\n    @Bean\n    public Retryer feignRetryer() {\n        return new Retryer.Default(1000,3000,3);\n    }\n}\n```\n\n方式二：通过配置文件方式指定。\n\n```yaml\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000 #连接超时\n        readTimeout: 5000 #读取超时\n        loggerLevel: basic #日志等级\n```\n\n## Feign Client开启日志\n\n日志配置和上述配置相同，也有两种方式。\n\n方式一：通过java bean的方式指定\n\n```java\n@Configuration\npublic class DefaultFeignConfiguration {\n    @Bean\n    public Logger.Level feignLoggerLevel(){\n        return Logger.Level.BASIC;\n    }\n}\n```\n\n方式二：通过配置文件指定\n\n```yaml\nlogging:\n  level:\n    com.xt.open.jmall.product.remote.feignclients.CartFeignClient: debug\n```\n\n## Feign 的GET的多参数传递\n\n目前，feign不支持GET请求直接传递POJO对象的，目前解决方法如下：\n\n1. 把POJO拆散城一个一个单独的属性放在方法参数中\n2. 把方法参数编程Map传递\n3. 使用GET传递@RequestBody，但此方式违反restful风格\n\n介绍一个最佳实践，通过feign的拦截器来实现。\n\n```java\n@Component\n@Slf4j\npublic class FeignCustomRequestInteceptor implements RequestInterceptor {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Override\n    public void apply(RequestTemplate template) {\n        if (HttpMethod.GET.toString() == template.method() && template.body() != null) {\n            //feign 不支持GET方法传输POJO 转换成json，再换成query\n            try {\n                Map<String, Collection<String>> map = objectMapper.readValue(template.bodyTemplate(), new TypeReference<Map<String, Collection<String>>>() {\n\n                });\n                template.body(null);\n                template.queries(map);\n            } catch (IOException e) {\n                log.error(\"cause exception\", e);\n            }\n        }\n    }\n```","source":"_posts/SpringCloud之Feign简介及使用.md","raw":"---\ntitle: SpringCloud之Feign简介及使用\ndate: 2021-05-23 13:51:30\ncategories: java\ntags: [java,sprngcloud]\ndescription: 上一篇简单介绍了springcloud声明式服务调用Feign的使用，接下来分析下Feign的源码，具体实现及为什么如此实现。\n---\n\n## Feign的目标\n\nfeign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。\n\n## 引入Feign \n\n项目中使用了gradle作为依赖管理，maven类似。\n\n```groovy\ndependencies {\n    //feign\n    implementation('org.springframework.cloud:spring-cloud-starter-openfeign:2.0.2.RELEASE')\n\t//web\n    implementation('org.springframework.boot:spring-boot-starter-web')\n    //eureka client\n    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.1.0.M1')\n\t//test\n    testImplementation('org.springframework.boot:spring-boot-starter-test')\n}\n```\n\n因为feign底层是使用了ribbon作为负载均衡的客户端，而ribbon的负载均衡也是依赖于eureka 获得各个服务的地址，所以要引入eureka-client。\n\nSpringbootApplication启动类加上@FeignClient注解，以及@EnableDiscoveryClient。\n\n```java\n@EnableFeignClients\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n}\n```\n\nyaml配置：\n\n```yaml\nserver:\n  port: 8082\n\n#配置eureka\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n  instance:\n    status-page-url-path: /info\n    health-check-url-path: /health\n\n#服务名称\nspring:\n  application:\n    name: product\n  profiles:\n    active: ${boot.profile:dev}\n#feign的配置，连接超时及读取超时配置\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        readTimeout: 5000\n        loggerLevel: basic\n```\n\n## Feign的使用\n\n```java\n@FeignClient(value = \"CART\")\npublic interface CartFeignClient {\n\n    @PostMapping(\"/cart/{productId}\")\n    Long addCart(@PathVariable(\"productId\")Long productId);\n}\n```\n\n上面是最简单的feign client的使用，声明完为feign client后，其他spring管理的类，如service就可以直接注入使用了，例如：\n\n```java\n//这里直接注入feign client\n@Autowired\nprivate CartFeignClient cartFeignClient;\n\n@PostMapping(\"/toCart/{productId}\")\npublic ResponseEntity addCart(@PathVariable(\"productId\") Long productId){\n    Long result = cartFeignClient.addCart(productId);\n    return ResponseEntity.ok(result);\n}\n```\n\n可以看到，使用feign之后，我们调用eureka 注册的其他服务，在代码中就像各个service之间相互调用那么简单。\n\n## FeignClient注解的一些属性\n\n| 属性名        | 默认值     | 作用                                                         | 备注                                        |\n| ------------- | ---------- | ------------------------------------------------------------ | ------------------------------------------- |\n| value         | 空字符串   | 调用服务名称，和name属性相同                                 |                                             |\n| serviceId     | 空字符串   | 服务id，作用和name属性相同                                   | 已过期                                      |\n| name          | 空字符串   | 调用服务名称，和value属性相同                                |                                             |\n| url           | 空字符串   | 全路径地址或hostname，http或https可选                        |                                             |\n| decode404     | false      | 配置响应状态码为404时是否应该抛出FeignExceptions             |                                             |\n| configuration | {}         | 自定义当前feign client的一些配置                             | 参考FeignClientsConfiguration               |\n| fallback      | void.class | 熔断机制，调用失败时，走的一些回退方法，可以用来抛出异常或给出默认返回数据。 | 底层依赖hystrix，启动类要加上@EnableHystrix |\n| path          | 空字符串   | 自动给所有方法的requestMapping前加上前缀，类似与controller类上的requestMapping |                                             |\n| primary       | true       |                                                              |                                             |\n\n此外，还有qualifier及fallbackFactory，这里就不再赘述。\n\n## Feign自定义处理返回的异常\n\n这里贴上GitHub上openFeign的wiki给出的自定义errorDecoder例子。\n\n```java\npublic class StashErrorDecoder implements ErrorDecoder {\n\n    @Override\n    public Exception decode(String methodKey, Response response) {\n        if (response.status() >= 400 && response.status() <= 499) {\n            //这里是给出的自定义异常\n            return new StashClientException(\n                    response.status(),\n                    response.reason()\n            );\n        }\n        if (response.status() >= 500 && response.status() <= 599) {\n            //这里是给出的自定义异常\n            return new StashServerException(\n                    response.status(),\n                    response.reason()\n            );\n        }\n        //这里是其他状态码处理方法\n        return errorStatus(methodKey, response);\n    }\n}\n```\n\n自定义好异常处理类后，要在@Configuration修饰的配置类中声明此类。\n\n## Feign使用OKhttp发送request\n\nFeign底层默认是使用jdk中的HttpURLConnection发送HTTP请求，feign也提供了OKhttp来发送请求，具体配置如下：\n\n```java\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000\n        readTimeout: 5000\n        loggerLevel: basic\n  okhttp:\n    enabled: true\n  hystrix:\n    enabled: true\n```\n\n## Feign原理简述\n\n- 启动时，程序会进行包扫描，扫描所有包下所有@FeignClient注解的类，并将这些类注入到spring的IOC容器中。当定义的Feign中的接口被调用时，通过JDK的动态代理来生成RequestTemplate。\n- RequestTemplate中包含请求的所有信息，如请求参数，请求URL等。\n- RequestTemplate声场Request，然后将Request交给client处理，这个client默认是JDK的HTTPUrlConnection，也可以是OKhttp、Apache的HTTPClient等。\n- 最后client封装成LoadBaLanceClient，结合ribbon负载均衡地发起调用。\n\n详细原理请参考源码解析。\n\nFeign、hystrix与retry的关系请参考https://xli1224.github.io/2017/09/22/configure-feign/\n\n## Feign开启GZIP压缩\n\nSpring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率。\n\napplication.yml配置信息如下：\n\n```yaml\nfeign:\n  compression:\n    request: #请求\n      enabled: true #开启\n      mime-types: text/xml,application/xml,application/json #开启支持压缩的MIME TYPE\n      min-request-size: 2048 #配置压缩数据大小的下限\n    response: #响应\n      enabled: true #开启响应GZIP压缩\n```\n\n注意：\n\n由于开启GZIP压缩之后，Feign之间的调用数据通过二进制协议进行传输，返回值需要修改为ResponseEntity<byte[]>才可以正常显示，否则会导致服务之间的调用乱码。\n\n示例如下：\n\n```java\n@PostMapping(\"/order/{productId}\")\nResponseEntity<byte[]> addCart(@PathVariable(\"productId\") Long productId);\n```\n\n## 作用在所有Feign Client上的配置方式\n\n方式一：通过java bean 的方式指定。\n\n@EnableFeignClients注解上有个defaultConfiguration属性，可以指定默认Feign Client的一些配置。\n\n```java\n@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)\n@EnableDiscoveryClient\n@SpringBootApplication\n@EnableCircuitBreaker\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n}\n```\n\nDefaultFeignConfiguration内容：\n\n```java\n@Configuration\npublic class DefaultFeignConfiguration {\n\n    @Bean\n    public Retryer feignRetryer() {\n        return new Retryer.Default(1000,3000,3);\n    }\n}\n```\n\n方式二：通过配置文件方式指定。\n\n```yaml\nfeign:\n  client:\n    config:\n      default:\n        connectTimeout: 5000 #连接超时\n        readTimeout: 5000 #读取超时\n        loggerLevel: basic #日志等级\n```\n\n## Feign Client开启日志\n\n日志配置和上述配置相同，也有两种方式。\n\n方式一：通过java bean的方式指定\n\n```java\n@Configuration\npublic class DefaultFeignConfiguration {\n    @Bean\n    public Logger.Level feignLoggerLevel(){\n        return Logger.Level.BASIC;\n    }\n}\n```\n\n方式二：通过配置文件指定\n\n```yaml\nlogging:\n  level:\n    com.xt.open.jmall.product.remote.feignclients.CartFeignClient: debug\n```\n\n## Feign 的GET的多参数传递\n\n目前，feign不支持GET请求直接传递POJO对象的，目前解决方法如下：\n\n1. 把POJO拆散城一个一个单独的属性放在方法参数中\n2. 把方法参数编程Map传递\n3. 使用GET传递@RequestBody，但此方式违反restful风格\n\n介绍一个最佳实践，通过feign的拦截器来实现。\n\n```java\n@Component\n@Slf4j\npublic class FeignCustomRequestInteceptor implements RequestInterceptor {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Override\n    public void apply(RequestTemplate template) {\n        if (HttpMethod.GET.toString() == template.method() && template.body() != null) {\n            //feign 不支持GET方法传输POJO 转换成json，再换成query\n            try {\n                Map<String, Collection<String>> map = objectMapper.readValue(template.bodyTemplate(), new TypeReference<Map<String, Collection<String>>>() {\n\n                });\n                template.body(null);\n                template.queries(map);\n            } catch (IOException e) {\n                log.error(\"cause exception\", e);\n            }\n        }\n    }\n```","slug":"SpringCloud之Feign简介及使用","published":1,"updated":"2021-05-23T06:05:01.470Z","_id":"ckp0rjaus00043i8504pm9lnh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Feign的目标\"><a href=\"#Feign的目标\" class=\"headerlink\" title=\"Feign的目标\"></a>Feign的目标</h2><p>feign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。</p>\n<h2 id=\"引入Feign\"><a href=\"#引入Feign\" class=\"headerlink\" title=\"引入Feign\"></a>引入Feign</h2><p>项目中使用了gradle作为依赖管理，maven类似。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">//feign</span></span><br><span class=\"line\">    implementation(<span class=\"string\">&#x27;org.springframework.cloud:spring-cloud-starter-openfeign:2.0.2.RELEASE&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//web</span></span><br><span class=\"line\">    implementation(<span class=\"string\">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//eureka client</span></span><br><span class=\"line\">    implementation(<span class=\"string\">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.1.0.M1&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//test</span></span><br><span class=\"line\">    testImplementation(<span class=\"string\">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为feign底层是使用了ribbon作为负载均衡的客户端，而ribbon的负载均衡也是依赖于eureka 获得各个服务的地址，所以要引入eureka-client。</p>\n<p>SpringbootApplication启动类加上@FeignClient注解，以及@EnableDiscoveryClient。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ProductApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>yaml配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置eureka</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">status-page-url-path:</span> <span class=\"string\">/info</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/health</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">product</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">$&#123;boot.profile:dev&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#feign的配置，连接超时及读取超时配置</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">connectTimeout:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">        <span class=\"attr\">readTimeout:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">basic</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign的使用\"><a href=\"#Feign的使用\" class=\"headerlink\" title=\"Feign的使用\"></a>Feign的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;CART&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CartFeignClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/cart/&#123;productId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">Long <span class=\"title\">addCart</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;productId&quot;)</span>Long productId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是最简单的feign client的使用，声明完为feign client后，其他spring管理的类，如service就可以直接注入使用了，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里直接注入feign client</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> CartFeignClient cartFeignClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/toCart/&#123;productId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity <span class=\"title\">addCart</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;productId&quot;)</span> Long productId)</span></span>&#123;</span><br><span class=\"line\">    Long result = cartFeignClient.addCart(productId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResponseEntity.ok(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，使用feign之后，我们调用eureka 注册的其他服务，在代码中就像各个service之间相互调用那么简单。</p>\n<h2 id=\"FeignClient注解的一些属性\"><a href=\"#FeignClient注解的一些属性\" class=\"headerlink\" title=\"FeignClient注解的一些属性\"></a>FeignClient注解的一些属性</h2><table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>默认值</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>空字符串</td>\n<td>调用服务名称，和name属性相同</td>\n<td></td>\n</tr>\n<tr>\n<td>serviceId</td>\n<td>空字符串</td>\n<td>服务id，作用和name属性相同</td>\n<td>已过期</td>\n</tr>\n<tr>\n<td>name</td>\n<td>空字符串</td>\n<td>调用服务名称，和value属性相同</td>\n<td></td>\n</tr>\n<tr>\n<td>url</td>\n<td>空字符串</td>\n<td>全路径地址或hostname，http或https可选</td>\n<td></td>\n</tr>\n<tr>\n<td>decode404</td>\n<td>false</td>\n<td>配置响应状态码为404时是否应该抛出FeignExceptions</td>\n<td></td>\n</tr>\n<tr>\n<td>configuration</td>\n<td>{}</td>\n<td>自定义当前feign client的一些配置</td>\n<td>参考FeignClientsConfiguration</td>\n</tr>\n<tr>\n<td>fallback</td>\n<td>void.class</td>\n<td>熔断机制，调用失败时，走的一些回退方法，可以用来抛出异常或给出默认返回数据。</td>\n<td>底层依赖hystrix，启动类要加上@EnableHystrix</td>\n</tr>\n<tr>\n<td>path</td>\n<td>空字符串</td>\n<td>自动给所有方法的requestMapping前加上前缀，类似与controller类上的requestMapping</td>\n<td></td>\n</tr>\n<tr>\n<td>primary</td>\n<td>true</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此外，还有qualifier及fallbackFactory，这里就不再赘述。</p>\n<h2 id=\"Feign自定义处理返回的异常\"><a href=\"#Feign自定义处理返回的异常\" class=\"headerlink\" title=\"Feign自定义处理返回的异常\"></a>Feign自定义处理返回的异常</h2><p>这里贴上GitHub上openFeign的wiki给出的自定义errorDecoder例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StashErrorDecoder</span> <span class=\"keyword\">implements</span> <span class=\"title\">ErrorDecoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Exception <span class=\"title\">decode</span><span class=\"params\">(String methodKey, Response response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.status() &gt;= <span class=\"number\">400</span> &amp;&amp; response.status() &lt;= <span class=\"number\">499</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里是给出的自定义异常</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StashClientException(</span><br><span class=\"line\">                    response.status(),</span><br><span class=\"line\">                    response.reason()</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.status() &gt;= <span class=\"number\">500</span> &amp;&amp; response.status() &lt;= <span class=\"number\">599</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里是给出的自定义异常</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StashServerException(</span><br><span class=\"line\">                    response.status(),</span><br><span class=\"line\">                    response.reason()</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里是其他状态码处理方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorStatus(methodKey, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义好异常处理类后，要在@Configuration修饰的配置类中声明此类。</p>\n<h2 id=\"Feign使用OKhttp发送request\"><a href=\"#Feign使用OKhttp发送request\" class=\"headerlink\" title=\"Feign使用OKhttp发送request\"></a>Feign使用OKhttp发送request</h2><p>Feign底层默认是使用jdk中的HttpURLConnection发送HTTP请求，feign也提供了OKhttp来发送请求，具体配置如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feign:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        connectTimeout: <span class=\"number\">5000</span></span><br><span class=\"line\">        readTimeout: <span class=\"number\">5000</span></span><br><span class=\"line\">        loggerLevel: basic</span><br><span class=\"line\">  okhttp:</span><br><span class=\"line\">    enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign原理简述\"><a href=\"#Feign原理简述\" class=\"headerlink\" title=\"Feign原理简述\"></a>Feign原理简述</h2><ul>\n<li>启动时，程序会进行包扫描，扫描所有包下所有@FeignClient注解的类，并将这些类注入到spring的IOC容器中。当定义的Feign中的接口被调用时，通过JDK的动态代理来生成RequestTemplate。</li>\n<li>RequestTemplate中包含请求的所有信息，如请求参数，请求URL等。</li>\n<li>RequestTemplate声场Request，然后将Request交给client处理，这个client默认是JDK的HTTPUrlConnection，也可以是OKhttp、Apache的HTTPClient等。</li>\n<li>最后client封装成LoadBaLanceClient，结合ribbon负载均衡地发起调用。</li>\n</ul>\n<p>详细原理请参考源码解析。</p>\n<p>Feign、hystrix与retry的关系请参考<a href=\"https://xli1224.github.io/2017/09/22/configure-feign/\">https://xli1224.github.io/2017/09/22/configure-feign/</a></p>\n<h2 id=\"Feign开启GZIP压缩\"><a href=\"#Feign开启GZIP压缩\" class=\"headerlink\" title=\"Feign开启GZIP压缩\"></a>Feign开启GZIP压缩</h2><p>Spring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率。</p>\n<p>application.yml配置信息如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">compression:</span></span><br><span class=\"line\">    <span class=\"attr\">request:</span> <span class=\"comment\">#请求</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\">#开启</span></span><br><span class=\"line\">      <span class=\"attr\">mime-types:</span> <span class=\"string\">text/xml,application/xml,application/json</span> <span class=\"comment\">#开启支持压缩的MIME TYPE</span></span><br><span class=\"line\">      <span class=\"attr\">min-request-size:</span> <span class=\"number\">2048</span> <span class=\"comment\">#配置压缩数据大小的下限</span></span><br><span class=\"line\">    <span class=\"attr\">response:</span> <span class=\"comment\">#响应</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\">#开启响应GZIP压缩</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>由于开启GZIP压缩之后，Feign之间的调用数据通过二进制协议进行传输，返回值需要修改为ResponseEntity&lt;byte[]&gt;才可以正常显示，否则会导致服务之间的调用乱码。</p>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/order/&#123;productId&#125;&quot;)</span></span><br><span class=\"line\">ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; addCart(<span class=\"meta\">@PathVariable(&quot;productId&quot;)</span> Long productId);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用在所有Feign-Client上的配置方式\"><a href=\"#作用在所有Feign-Client上的配置方式\" class=\"headerlink\" title=\"作用在所有Feign Client上的配置方式\"></a>作用在所有Feign Client上的配置方式</h2><p>方式一：通过java bean 的方式指定。</p>\n<p>@EnableFeignClients注解上有个defaultConfiguration属性，可以指定默认Feign Client的一些配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ProductApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DefaultFeignConfiguration内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultFeignConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Retryer <span class=\"title\">feignRetryer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Retryer.Default(<span class=\"number\">1000</span>,<span class=\"number\">3000</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：通过配置文件方式指定。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">connectTimeout:</span> <span class=\"number\">5000</span> <span class=\"comment\">#连接超时</span></span><br><span class=\"line\">        <span class=\"attr\">readTimeout:</span> <span class=\"number\">5000</span> <span class=\"comment\">#读取超时</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">basic</span> <span class=\"comment\">#日志等级</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign-Client开启日志\"><a href=\"#Feign-Client开启日志\" class=\"headerlink\" title=\"Feign Client开启日志\"></a>Feign Client开启日志</h2><p>日志配置和上述配置相同，也有两种方式。</p>\n<p>方式一：通过java bean的方式指定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultFeignConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger.<span class=\"function\">Level <span class=\"title\">feignLoggerLevel</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.BASIC;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：通过配置文件指定</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">com.xt.open.jmall.product.remote.feignclients.CartFeignClient:</span> <span class=\"string\">debug</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign-的GET的多参数传递\"><a href=\"#Feign-的GET的多参数传递\" class=\"headerlink\" title=\"Feign 的GET的多参数传递\"></a>Feign 的GET的多参数传递</h2><p>目前，feign不支持GET请求直接传递POJO对象的，目前解决方法如下：</p>\n<ol>\n<li>把POJO拆散城一个一个单独的属性放在方法参数中</li>\n<li>把方法参数编程Map传递</li>\n<li>使用GET传递@RequestBody，但此方式违反restful风格</li>\n</ol>\n<p>介绍一个最佳实践，通过feign的拦截器来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignCustomRequestInteceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate template)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HttpMethod.GET.toString() == template.method() &amp;&amp; template.body() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//feign 不支持GET方法传输POJO 转换成json，再换成query</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Map&lt;String, Collection&lt;String&gt;&gt; map = objectMapper.readValue(template.bodyTemplate(), <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Collection&lt;String&gt;&gt;&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                template.body(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                template.queries(map);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;cause exception&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Feign的目标\"><a href=\"#Feign的目标\" class=\"headerlink\" title=\"Feign的目标\"></a>Feign的目标</h2><p>feign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。</p>\n<h2 id=\"引入Feign\"><a href=\"#引入Feign\" class=\"headerlink\" title=\"引入Feign\"></a>引入Feign</h2><p>项目中使用了gradle作为依赖管理，maven类似。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">//feign</span></span><br><span class=\"line\">    implementation(<span class=\"string\">&#x27;org.springframework.cloud:spring-cloud-starter-openfeign:2.0.2.RELEASE&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//web</span></span><br><span class=\"line\">    implementation(<span class=\"string\">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//eureka client</span></span><br><span class=\"line\">    implementation(<span class=\"string\">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.1.0.M1&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//test</span></span><br><span class=\"line\">    testImplementation(<span class=\"string\">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为feign底层是使用了ribbon作为负载均衡的客户端，而ribbon的负载均衡也是依赖于eureka 获得各个服务的地址，所以要引入eureka-client。</p>\n<p>SpringbootApplication启动类加上@FeignClient注解，以及@EnableDiscoveryClient。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ProductApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>yaml配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置eureka</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">status-page-url-path:</span> <span class=\"string\">/info</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/health</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">product</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">$&#123;boot.profile:dev&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#feign的配置，连接超时及读取超时配置</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">connectTimeout:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">        <span class=\"attr\">readTimeout:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">basic</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign的使用\"><a href=\"#Feign的使用\" class=\"headerlink\" title=\"Feign的使用\"></a>Feign的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;CART&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CartFeignClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/cart/&#123;productId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">Long <span class=\"title\">addCart</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;productId&quot;)</span>Long productId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是最简单的feign client的使用，声明完为feign client后，其他spring管理的类，如service就可以直接注入使用了，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里直接注入feign client</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> CartFeignClient cartFeignClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/toCart/&#123;productId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity <span class=\"title\">addCart</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;productId&quot;)</span> Long productId)</span></span>&#123;</span><br><span class=\"line\">    Long result = cartFeignClient.addCart(productId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResponseEntity.ok(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，使用feign之后，我们调用eureka 注册的其他服务，在代码中就像各个service之间相互调用那么简单。</p>\n<h2 id=\"FeignClient注解的一些属性\"><a href=\"#FeignClient注解的一些属性\" class=\"headerlink\" title=\"FeignClient注解的一些属性\"></a>FeignClient注解的一些属性</h2><table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>默认值</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>空字符串</td>\n<td>调用服务名称，和name属性相同</td>\n<td></td>\n</tr>\n<tr>\n<td>serviceId</td>\n<td>空字符串</td>\n<td>服务id，作用和name属性相同</td>\n<td>已过期</td>\n</tr>\n<tr>\n<td>name</td>\n<td>空字符串</td>\n<td>调用服务名称，和value属性相同</td>\n<td></td>\n</tr>\n<tr>\n<td>url</td>\n<td>空字符串</td>\n<td>全路径地址或hostname，http或https可选</td>\n<td></td>\n</tr>\n<tr>\n<td>decode404</td>\n<td>false</td>\n<td>配置响应状态码为404时是否应该抛出FeignExceptions</td>\n<td></td>\n</tr>\n<tr>\n<td>configuration</td>\n<td>{}</td>\n<td>自定义当前feign client的一些配置</td>\n<td>参考FeignClientsConfiguration</td>\n</tr>\n<tr>\n<td>fallback</td>\n<td>void.class</td>\n<td>熔断机制，调用失败时，走的一些回退方法，可以用来抛出异常或给出默认返回数据。</td>\n<td>底层依赖hystrix，启动类要加上@EnableHystrix</td>\n</tr>\n<tr>\n<td>path</td>\n<td>空字符串</td>\n<td>自动给所有方法的requestMapping前加上前缀，类似与controller类上的requestMapping</td>\n<td></td>\n</tr>\n<tr>\n<td>primary</td>\n<td>true</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此外，还有qualifier及fallbackFactory，这里就不再赘述。</p>\n<h2 id=\"Feign自定义处理返回的异常\"><a href=\"#Feign自定义处理返回的异常\" class=\"headerlink\" title=\"Feign自定义处理返回的异常\"></a>Feign自定义处理返回的异常</h2><p>这里贴上GitHub上openFeign的wiki给出的自定义errorDecoder例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StashErrorDecoder</span> <span class=\"keyword\">implements</span> <span class=\"title\">ErrorDecoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Exception <span class=\"title\">decode</span><span class=\"params\">(String methodKey, Response response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.status() &gt;= <span class=\"number\">400</span> &amp;&amp; response.status() &lt;= <span class=\"number\">499</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里是给出的自定义异常</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StashClientException(</span><br><span class=\"line\">                    response.status(),</span><br><span class=\"line\">                    response.reason()</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.status() &gt;= <span class=\"number\">500</span> &amp;&amp; response.status() &lt;= <span class=\"number\">599</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里是给出的自定义异常</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StashServerException(</span><br><span class=\"line\">                    response.status(),</span><br><span class=\"line\">                    response.reason()</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里是其他状态码处理方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorStatus(methodKey, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义好异常处理类后，要在@Configuration修饰的配置类中声明此类。</p>\n<h2 id=\"Feign使用OKhttp发送request\"><a href=\"#Feign使用OKhttp发送request\" class=\"headerlink\" title=\"Feign使用OKhttp发送request\"></a>Feign使用OKhttp发送request</h2><p>Feign底层默认是使用jdk中的HttpURLConnection发送HTTP请求，feign也提供了OKhttp来发送请求，具体配置如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feign:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        connectTimeout: <span class=\"number\">5000</span></span><br><span class=\"line\">        readTimeout: <span class=\"number\">5000</span></span><br><span class=\"line\">        loggerLevel: basic</span><br><span class=\"line\">  okhttp:</span><br><span class=\"line\">    enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign原理简述\"><a href=\"#Feign原理简述\" class=\"headerlink\" title=\"Feign原理简述\"></a>Feign原理简述</h2><ul>\n<li>启动时，程序会进行包扫描，扫描所有包下所有@FeignClient注解的类，并将这些类注入到spring的IOC容器中。当定义的Feign中的接口被调用时，通过JDK的动态代理来生成RequestTemplate。</li>\n<li>RequestTemplate中包含请求的所有信息，如请求参数，请求URL等。</li>\n<li>RequestTemplate声场Request，然后将Request交给client处理，这个client默认是JDK的HTTPUrlConnection，也可以是OKhttp、Apache的HTTPClient等。</li>\n<li>最后client封装成LoadBaLanceClient，结合ribbon负载均衡地发起调用。</li>\n</ul>\n<p>详细原理请参考源码解析。</p>\n<p>Feign、hystrix与retry的关系请参考<a href=\"https://xli1224.github.io/2017/09/22/configure-feign/\">https://xli1224.github.io/2017/09/22/configure-feign/</a></p>\n<h2 id=\"Feign开启GZIP压缩\"><a href=\"#Feign开启GZIP压缩\" class=\"headerlink\" title=\"Feign开启GZIP压缩\"></a>Feign开启GZIP压缩</h2><p>Spring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率。</p>\n<p>application.yml配置信息如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">compression:</span></span><br><span class=\"line\">    <span class=\"attr\">request:</span> <span class=\"comment\">#请求</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\">#开启</span></span><br><span class=\"line\">      <span class=\"attr\">mime-types:</span> <span class=\"string\">text/xml,application/xml,application/json</span> <span class=\"comment\">#开启支持压缩的MIME TYPE</span></span><br><span class=\"line\">      <span class=\"attr\">min-request-size:</span> <span class=\"number\">2048</span> <span class=\"comment\">#配置压缩数据大小的下限</span></span><br><span class=\"line\">    <span class=\"attr\">response:</span> <span class=\"comment\">#响应</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\">#开启响应GZIP压缩</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>由于开启GZIP压缩之后，Feign之间的调用数据通过二进制协议进行传输，返回值需要修改为ResponseEntity&lt;byte[]&gt;才可以正常显示，否则会导致服务之间的调用乱码。</p>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/order/&#123;productId&#125;&quot;)</span></span><br><span class=\"line\">ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; addCart(<span class=\"meta\">@PathVariable(&quot;productId&quot;)</span> Long productId);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用在所有Feign-Client上的配置方式\"><a href=\"#作用在所有Feign-Client上的配置方式\" class=\"headerlink\" title=\"作用在所有Feign Client上的配置方式\"></a>作用在所有Feign Client上的配置方式</h2><p>方式一：通过java bean 的方式指定。</p>\n<p>@EnableFeignClients注解上有个defaultConfiguration属性，可以指定默认Feign Client的一些配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ProductApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DefaultFeignConfiguration内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultFeignConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Retryer <span class=\"title\">feignRetryer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Retryer.Default(<span class=\"number\">1000</span>,<span class=\"number\">3000</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：通过配置文件方式指定。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">connectTimeout:</span> <span class=\"number\">5000</span> <span class=\"comment\">#连接超时</span></span><br><span class=\"line\">        <span class=\"attr\">readTimeout:</span> <span class=\"number\">5000</span> <span class=\"comment\">#读取超时</span></span><br><span class=\"line\">        <span class=\"attr\">loggerLevel:</span> <span class=\"string\">basic</span> <span class=\"comment\">#日志等级</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign-Client开启日志\"><a href=\"#Feign-Client开启日志\" class=\"headerlink\" title=\"Feign Client开启日志\"></a>Feign Client开启日志</h2><p>日志配置和上述配置相同，也有两种方式。</p>\n<p>方式一：通过java bean的方式指定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultFeignConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger.<span class=\"function\">Level <span class=\"title\">feignLoggerLevel</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.BASIC;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：通过配置文件指定</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">com.xt.open.jmall.product.remote.feignclients.CartFeignClient:</span> <span class=\"string\">debug</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign-的GET的多参数传递\"><a href=\"#Feign-的GET的多参数传递\" class=\"headerlink\" title=\"Feign 的GET的多参数传递\"></a>Feign 的GET的多参数传递</h2><p>目前，feign不支持GET请求直接传递POJO对象的，目前解决方法如下：</p>\n<ol>\n<li>把POJO拆散城一个一个单独的属性放在方法参数中</li>\n<li>把方法参数编程Map传递</li>\n<li>使用GET传递@RequestBody，但此方式违反restful风格</li>\n</ol>\n<p>介绍一个最佳实践，通过feign的拦截器来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignCustomRequestInteceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate template)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HttpMethod.GET.toString() == template.method() &amp;&amp; template.body() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//feign 不支持GET方法传输POJO 转换成json，再换成query</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Map&lt;String, Collection&lt;String&gt;&gt; map = objectMapper.readValue(template.bodyTemplate(), <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Collection&lt;String&gt;&gt;&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                template.body(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                template.queries(map);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;cause exception&quot;</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckp0rjaus00043i8504pm9lnh","category_id":"ckp0s0om800005e85fusy54zz","_id":"ckp0s0ome00035e85gmdig4b4"}],"PostTag":[{"post_id":"ckp0rjaus00043i8504pm9lnh","tag_id":"ckp0s0omb00015e857mdhgeog","_id":"ckp0s0omf00045e859ryc2trz"},{"post_id":"ckp0rjaus00043i8504pm9lnh","tag_id":"ckp0s0omc00025e856o6p9v7z","_id":"ckp0s0omf00055e854kxpg6hx"}],"Tag":[{"name":"java","_id":"ckp0s0omb00015e857mdhgeog"},{"name":"sprngcloud","_id":"ckp0s0omc00025e856o6p9v7z"}]}}